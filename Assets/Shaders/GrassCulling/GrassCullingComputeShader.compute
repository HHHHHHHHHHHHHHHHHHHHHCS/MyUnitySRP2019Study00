#pragma kernel CSMain

float4x4 _VPMatrix;
float _MaxDrawDistance;
uint _StartOffset;
StructuredBuffer<float3> _AllInstancesPosWSBuffer;
AppendStructuredBuffer<uint> _VisibleInstancesOnlyPosWSIDBuffer;

[numthreads(64, 1, 1)]
void CSMain(uint3 id: SV_DispatchThreadID)
{
	float4 absPosCS = abs(mul(_VPMatrix, float4(_AllInstancesPosWSBuffer[id.x + _StartOffset], 1.0)));
	
	//在clip空间进行剔除测试，结果与在NDC空间进行测试结果一致。
	//这里更喜欢剪辑空间，因为在剪辑空间中进行剔除测试比在NDC中进行筛选测试要快，因为我们可以跳过1个除法。
	//测试使用OpenGL标准的投影矩阵，因为unity C# 的所有矩阵都是OpenGL标准的
	//如果实例在摄影机截锥内，并且在绘制距离内，则将其附加到_VisibleInstanceOnlyTransformBuffer
	//y测试允许50%以上的阈值（草地硬代码）
	//x测试允许10%以上的阈值（草地硬代码）
	if (absPosCS.z <= absPosCS.w && absPosCS.y <= absPosCS.w * 1.5 && absPosCS.x <= absPosCS.w * 1.1 && absPosCS.w <= _MaxDrawDistance)
	{
		_VisibleInstancesOnlyPosWSIDBuffer.Append(id.x + _StartOffset);
	}
}