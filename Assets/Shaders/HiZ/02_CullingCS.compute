//1.是否可见  如果有aabb一点顶点可见则可见
//2.如果最近的顶点还被遮挡了 则还是不可见
//3.如果可见的尺寸太小了 则还是不可见
//4.如果可见 则 根据是否需要阴影 而产生阴影
//5.根据距离使用  决定使用LOD0 1 2  写入 LOD0 1 3 * 5args
//6.aabb离摄像机最近的点的距离  覆盖到 sortingData


#include "ShaderInclude_IndirectStructs.cginc"
#include "UnityCG.cginc"
#include "UnityDeferredLibrary.cginc"

#pragma kernel CSMain


#define THREAD_GROUP_SIZE_X 64
#define THREAD_GROUP_SIZE_Y 1
#define THREAD_GROUP_SIZE_Z 1

#define LOD00_RANGE 50
#define LOD01_RANGE 100


//--------------------------------------------------------------------------------------
// Constant Buffers
//--------------------------------------------------------------------------------------

cbuffer CB
{
	uint _ShouldFrustumCull;
	uint _ShouldOcclusionCull;
	uint _ShouldDetailCull;
	uint _ShouldLOD;
	uint _ShouldOnlyUseLOD02Shadows;
	
	int _ShadowCascades;
	float _ShadowDistance;
	float _DetailCullingScreenPercentage;
	float2 _HiZTextureSize;
	float3 _CamPosition;
	
	float4x4 _UNITY_MATRIX_MVP;
	Texture2D<float4> _HiZMap;
	SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
};

StructuredBuffer<InstanceData> _InstanceDataBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _IsVisibleBuffer;
RWStructuredBuffer<uint> _ShadowArgsBuffer;
RWStructuredBuffer<uint> _ShadowIsVisibleBuffer;
RWStructuredBuffer<SortingData> _SortingData;

inline uint IsCameraOutsideObjBounds(float3 pos, float3 minPos, float3 maxPos)
{
	float boundsSize = distance(maxPos, minPos);
	return((distance(pos, maxPos) > boundsSize)
	+ (distance(pos, minPos) > boundsSize));
}

//太细了 过小的 遮挡剔除
inline uint IsVisibleAfterDetailCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY)
{
	return saturate(
		(distance(clipMinX, clipMaxX) >= _DetailCullingScreenPercentage)
	+ (distance(clipMinY, clipMaxY) >= _DetailCullingScreenPercentage)
	);
}

// Hi-Z Culling
// 和已经存在的z  进行比较
inline uint IsVisibleAfterOcclusionCulling(InstanceData instance, float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ)
{
	//[-1,1]->[0,1]
	float2 minXY = float2(clipMinX, clipMinY) * 0.5 + 0.5;
	float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5 + 0.5;
	
	// 毕竟三角面占用像素过多  导致计算浪费  用mip 采一个点就够了
	int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
	float mip = ceil(log2(max(size.x, size.y)));
	mip = clamp(mip, 0, 10);
	
	// 用更高的mimap
	float level_lower = max(mip - 1, 0);
	float2 scale = exp2(-level_lower) * _HiZTextureSize.xy;//2^(-8) = 1/(256) * 1024
	float2 a = floor(minXY * scale);//floor(0.002 * 4) ~= 0.0
	float2 b = ceil(maxXY * scale);//ceil(0.04*4) ~= 1
	float2 dims = b - a;//1,1
	
	// 如果之前的距离过小  则用更好的mipmap
	//通常都会进入  为了下面的STEP 采样用
	if (dims.x <= 2 && dims.y <= 2)
	{
		mip = level_lower;
	}
	
	// find the max depth
	// Hi-Z approach that allows for more samples.
	// https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
	//const   int numSamples = 24;
	const int xSamples = 8; // numSamples + 1;
	const int ySamples = 25; // numSamples + 1;
	const float widthSS = (maxXY.x - minXY.x);
	const float heightSS = (maxXY.y - minXY.y);
	const float maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);
	const float stepX = widthSS / xSamples;// offsetWidth/step
	const float stepY = heightSS / ySamples;
	
	//当前点 周围 已经存在的z 的 最小的Z
	float HIZdepth = 1;
	float yPos = minXY.y;
	for (int y = 0; y < ySamples; ++ y)
	{
		float xPos = minXY.x;
		for (int x = 0; x < xSamples; ++ x)
		{
			const float2 nCoords0 = float2(xPos, yPos);
			HIZdepth = min(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
			xPos += stepX;
		}
		yPos += stepY;
	}
	
	//当前Z 是否 比已经存在的最小的z 要小
	return(1.0 - clipMinZ) >= HIZdepth - 0.000015;
}

inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
	return(clipPos.z > clipPos.w
	|| clipPos.x < - clipPos.w
		|| clipPos.x > clipPos.w
		|| clipPos.y < - clipPos.w
		|| clipPos.y > clipPos.w)
		? 0: 1;
}


//--------------------------------------------------------------------------------------
// Kernels
//--------------------------------------------------------------------------------------


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
inline void CSMain(
	in uint3 _dispatchThreadID: SV_DispatchThreadID, // DispatchThreadID  = dot(GroupID, numthreads) + GroupThreadId;
	in uint  _groupIndex: SV_GroupIndex, // uint GroupIndex = unique index of a thread inside a group
	in uint3 _groupID: SV_GroupID, // GroupID = index for each dimension inside a ThreadGroupCount
	in uint3 _groupThreadID: SV_GroupThreadID // uint3 GroupThreadId = indices for each dimension inside a group of the current thread
)
{
	uint tID = _dispatchThreadID.x;
	SortingData sortingData = _SortingData[tID];
	uint drawCall = (sortingData.drawCallInstanceIndex >> 16);
	uint index = (sortingData.drawCallInstanceIndex) & 0xFFFF;
	
	_IsVisibleBuffer[tID] = 0;
	_ShadowIsVisibleBuffer[tID] = 0;
	
	InstanceData instance = _InstanceDataBuffer[index];
	
	float3 minPos = instance.boundsCenter - instance.boundsExtents;
	float3 maxPos = instance.boundsCenter + instance.boundsExtents;
	
	float4 boxCorners[8];
	boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
	boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
	boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
	boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
	boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
	boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
	boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
	boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);
	
	float4 clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[0]);
	//虽然这里/w 是齐次坐标  但是 跟 .w 比较也够了
	uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);
	
	clipPos.xyz = clipPos.xyz / clipPos.w;
	float clipMinX = clipPos.x;
	float clipMaxX = clipPos.x;
	float clipMinY = clipPos.y;
	float clipMaxY = clipPos.y;
	float clipMinZ = clipPos.z;
	
	float minDistanceToCamera = distance(instance.boundsCenter.xyz, _CamPosition.xyz);
	
	[unroll]
	for (int i = 1; i < 8; i ++)
	{
		clipPos = mul(_UNITY_MATRIX_MVP, boxCorners[i]);
		
		// For Frustum  可见的顶点数
		isInFrustum += IsVisibleAfterFrustumCulling(clipPos);
		
		// For HiZ
		clipPos.xyz = clipPos.xyz / clipPos.w;
		clipMinX = min(clipPos.x, clipMinX);
		clipMaxX = max(clipPos.x, clipMaxX);
		clipMinY = min(clipPos.y, clipMinY);
		clipMaxY = max(clipPos.y, clipMaxY);
		clipMinZ = min(clipPos.z, clipMinZ);
		
		
		// For LODing
		minDistanceToCamera = min(distance(boxCorners[i].xyz, _CamPosition.xyz), minDistanceToCamera);
	}
	
	//一个顶点可见   就是整个可见
	isInFrustum = saturate(isInFrustum);
	
	//我们只剔除不相交的实例 , 渲染在边界内的
	//判断物体是否在 obj 的 aabb 外部
	uint isVisible = 1;
	if (IsCameraOutsideObjBounds(_CamPosition, minPos, maxPos))
	{
		isVisible *= _ShouldFrustumCull?isInFrustum: 1;
		
		isVisible *= (_ShouldOcclusionCull * isVisible > 0) ? IsVisibleAfterOcclusionCulling(instance, clipMinX, clipMaxX, clipMinY, clipMaxY, clipMinZ): 1;
		
		isVisible *= (_ShouldDetailCull * isVisible > 0) ? IsVisibleAfterDetailCulling(clipMinX, clipMaxX, clipMinY, clipMaxY): 1;
	}
	
	float lod00Range = LOD00_RANGE;
	float lod01Range = LOD01_RANGE;
	
	//3*LOD*5 = 15  组成数组  这个是正确的index
	uint argsIndex = drawCall + 1;
	argsIndex += 5 * (minDistanceToCamera > lod00Range);
	argsIndex += 5 * (minDistanceToCamera > lod01Range);
	argsIndex = _ShouldLOD * argsIndex + ((_ShouldLOD == 0) * (drawCall + 11));
	
	uint shadowArgsIndex = argsIndex;//_ShouldOnlyUseLOD02Shadows ? drawCall + 11 : argsIndex;
	
	uint isCastingShadow = minDistanceToCamera < _ShadowDistance ? 1: 0;
	
	_IsVisibleBuffer[tID] = isVisible;
	InterlockedAdd(_ArgsBuffer[argsIndex], isVisible);
	
	_ShadowIsVisibleBuffer[tID] = isCastingShadow;
	InterlockedAdd(_ShadowArgsBuffer[shadowArgsIndex], isCastingShadow);
	
	sortingData.distanceToCam = minDistanceToCamera;
	_SortingData[tID] = sortingData;
}